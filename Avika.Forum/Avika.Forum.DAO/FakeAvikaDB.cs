// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Avika.Forum.DAO
{
    using Avika.Forum.Model;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Threading.Tasks;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.0.0")]
    public class FakeAvikaDB : IAvikaDB
    {
        public DbSet<AspNetUser> AspNetUsers { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<NewHasPhoto> NewHasPhotoes { get; set; }
        public DbSet<New> News { get; set; }

        public FakeAvikaDB()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            Categories = new FakeDbSet<Category>("Id");
            Companies = new FakeDbSet<Company>("Id");
            Departments = new FakeDbSet<Department>("Id");
            NewHasPhotoes = new FakeDbSet<NewHasPhoto>("Id");
            News = new FakeDbSet<New>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;
        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private DbContextConfiguration _configuration;
        public DbContextConfiguration Configuration { get { return _configuration; } }
        private Database _database;
        public Database Database { get { return _database; } }
        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }
        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }
        public override string ToString()
        {
            throw new NotImplementedException();
        }

    }
}
// </auto-generated>
